// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package cclist

import (
	"mp2/blockchain"
	"sync"
)

//cat generic_ccmap.go | genny gen "Key=string BlockchainTransaction=*blockchain.Transaction" > [targetName].go

// TransactionList the set of Items
type TransactionList struct {
	items []blockchain.Transaction
	transactionIDs map[string]int
	lock  sync.RWMutex
}

// Set adds a new item to the tail of the list
func (d *TransactionList) Append(v blockchain.Transaction) {
	d.lock.Lock()
	defer d.lock.Unlock()
	if d.items == nil {
		d.items = make([]blockchain.Transaction, 1)
		d.transactionIDs = make(map[string]int)
	}
	d.items = append(d.items, v)
	d.transactionIDs[v.ID] = 1
}

// Pop front
func (d *TransactionList) Pop(n int) []blockchain.Transaction {
	d.lock.Lock()
	defer d.lock.Unlock()
	var res []blockchain.Transaction
	if n < len(d.items) {
		res = d.items[:n]
		d.items = d.items[n:]
	} else {
		res = d.items
		d.items = make([]blockchain.Transaction, 1)
	}

	for _, tx := range res {
		delete(d.transactionIDs, tx.ID)
	}

	return res
}

func (d *TransactionList) Size() int {
	d.lock.RLock()
	defer d.lock.RUnlock()
	return len(d.items)
}

func (d *TransactionList) Has(transactionID string) bool {
 	_, ok := d.transactionIDs[transactionID]
	return ok
}