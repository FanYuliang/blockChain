// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package blockchain

import "sync"

//cat generic_ccmap.go | genny gen "Key=string Block=*blockchain.Transaction" > [targetName].go

// BlockList the set of Items
type BlockList struct {
	items []Block
	lock  sync.RWMutex
}

// Set adds a new item to the tail of the list
func (d *BlockList) Append(v Block) {
	d.lock.Lock()
	defer d.lock.Unlock()
	if d.items == nil {
		d.items = make([]Block, 1)
	}
	d.items = append(d.items, v)
}

// GetTransactionToCommit front
func (d *BlockList) Pop(n int) []Block {
	d.lock.Lock()
	defer d.lock.Unlock()
	var res []Block
	if n < len(d.items) {
		res = d.items[:n]
		d.items = d.items[n:]
	} else {
		res = d.items
		d.items = make([]Block, 1)
	}
	return res
}

func (d *BlockList) Size() int {
	d.lock.RLock()
	defer d.lock.RUnlock()
	return len(d.items)
}

func (d *BlockList) GetAll() []Block {
	d.lock.RLock()
	defer d.lock.RUnlock()
	return d.items
}

func (d *BlockList) Delete(b Block) bool{
	d.lock.Lock()
	defer d.lock.Unlock()
	for i, item := range d.items {
		if item.ID == b.ID {
			d.items = append(d.items[:i], d.items[i+1:]...)
			return true
		}
	}
	return false
}